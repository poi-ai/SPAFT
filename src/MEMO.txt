◎起動ファイル(Controllerクラス)
src直下に直接置かれている.pyファイルに設定。基本的にはこのファイルをコマンドで呼び出す

▲今動く
・gui.py - KabuStation API経由での注文をGUIで行う。
　　　　　　誤発注防止のために意図的に制限をかけているケース(日本株以外、一般口座、法人口座など)以外は注文可能
・yutai - コマンドラインから(優待権利確定後の)信用返済成行注文が簡単に行う処理。複数銘柄を一括で返済する場合などに使用
・main - メイン処理、Npipsスキャルピング処理と、強制成行決済処理が行える
・board_record.py - configファイルで指定した銘柄の板情報をDBに追加する

▲今動かん
・data_search.py - 全銘柄の板情報をCSV出力する。各カラムのステータスチェック用に作成、チェックが完了したら消す。
　　　　　　　　　　フロー自体は完成しているが、新ディレクトリ構成に対応していないので、動かない
・listed_update - 上場している銘柄のコードをDBに保持しておく。data_searchで効率よく循環させるために使う。
　　　　　　　　　　こちらもフロー自体は完成しているが新ディレクトリ構成に対応していない


◎継承元クラス
こちらもsrc直下に直接置かれている。起動ファイルの継承元クラスとして呼び出す
base.py - Controllerクラスの継承元、Logクラスのインスタンス生成・Utilクラスのインスタンス生成+(必要な場合引数で指定すれば)DB接続・APIのトークン取得を行う
service_base.py - Serviceクラスの継承元、Utilクラス・APIクラス・DBクラスのインスタンス生成を行う

◎Utilクラス
src/util/ 配下に設定。
ログや時間計算、データ加工などどのクラスでも使用できる共通処理を配置

◎Serviceクラス
src/service/ 配下に設定。
具体的なロジックはこのクラスで行う。ログ出力・API・DBクラスの各メソッドの呼び出しもここで行う

◎DBクラス
src/db/ 配下に設定。
db操作はこのクラスで行う

◎apiクラス
src/kabusapi/ 配下に設定。
KabuStation APIへのリクエスト送信はこのクラスで行う

◎設定ファイル
config.py.sample - 各種情報を設定するconfig.pyのサンプル
config.py - 各種情報を設定。誤って取引パスワードなどをpushしてしまうのを防ぐためにcommit対象から外しているため、config.py.sampleをコピー・リネームして設定する。
